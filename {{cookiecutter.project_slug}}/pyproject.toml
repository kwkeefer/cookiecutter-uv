[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
requires-python = ">={{ cookiecutter.python_version }}"
license = {%- if cookiecutter.open_source_license != 'Proprietary' %} { text = "{{ cookiecutter.open_source_license }}" }
{%- else %} { text = "Proprietary" }
{%- endif %}
authors = [
    { name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    {%- if cookiecutter.open_source_license == 'MIT' %}
    "License :: OSI Approved :: MIT License",
    {%- elif cookiecutter.open_source_license == 'Apache-2.0' %}
    "License :: OSI Approved :: Apache Software License",
    {%- elif cookiecutter.open_source_license == 'GPL-3.0' %}
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    {%- elif cookiecutter.open_source_license == 'BSD-3-Clause' %}
    "License :: OSI Approved :: BSD License",
    {%- else %}
    "License :: Other/Proprietary License",
    {%- endif %}
    "Programming Language :: Python :: {{ cookiecutter.python_version }}",
    "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
    {%- if cookiecutter.cli_framework == 'click' %}
    "click>=8.1.0",
    {%- elif cookiecutter.cli_framework == 'typer' %}
    "typer>=0.9.0",
    "rich>=13.0.0",
    {%- endif %}
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "ruff>=0.5.0",
    "mypy>=1.10.0",
    {%- if cookiecutter.use_pre_commit == 'yes' %}
    "pre-commit>=3.5.0",
    {%- endif %}
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
]

{%- if cookiecutter.cli_framework != 'none' %}

[project.scripts]
{{ cookiecutter.project_slug }} = "{{ cookiecutter.package_name }}.cli:main"
{%- endif %}

[project.urls]
Homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
Repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
Issues = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ cookiecutter.package_name }}"]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source_pkgs = ["{{ cookiecutter.package_name }}"]
branch = true
parallel = true
omit = [
    "src/{{ cookiecutter.package_name }}/__init__.py",
]

[tool.coverage.paths]
{{ cookiecutter.package_name }} = ["src/{{ cookiecutter.package_name }}", "*/{{ cookiecutter.project_slug }}/src/{{ cookiecutter.package_name }}"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 88
target-version = "py{{ cookiecutter.python_version.replace('.', '') }}"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.isort]
known-first-party = ["{{ cookiecutter.package_name }}"]

[tool.mypy]
python_version = "{{ cookiecutter.python_version }}"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true